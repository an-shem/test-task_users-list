{"version":3,"sources":["js/create-markup.js","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","js/create-contact.js","js/block-form.js","js/unblock-form.js","js/add-new-contact.js","js/get-form-data.js","db.json","index.js"],"names":["creatMarkup","name","number","urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase","creatContact","newContact","blockForm","buttonForm","setAttribute","refs","inputsForm","map","input","buttonContact","button","unblockForm","removeAttribute","addNewContact","contact","setTimeout","ul","insertAdjacentHTML","document","querySelectorAll","getFormData","e","preventDefault","target","value","reset","module","exports","querySelector","form","arrMarkupRef","users","join","console","addEventListener"],"mappings":"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","file":"src.67ed7dd2.js","sourceRoot":"../src","sourcesContent":["export const creatMarkup = ({ name, number }) => {\n  return `\n  <li class=\"users-list__item\">\n  <div class=\"users-list__text\">\n  <span class=\"users-list__name\">${name}</span>\n  <a class=\"users-list__phone-link\" href=\"tel:${number}\"\n  ><span class=\"users-list__phone-text\">${number}</span></a>\n  </div>\n  <div class=\"users-list__buttons\">\n  <button class=\"users-list__button edit\" type=\"button\">Редактировать</button>\n  <button class=\"users-list__button delete\" type=\"button\">Удалить</button>\n  </div>\n  </li>\n  `;\n};\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid';\n\nexport const creatContact = ({ name, number }) => {\n  const newContact = {\n    id: nanoid(),\n    name,\n    number,\n  };\n\n  return newContact;\n};\n","import { refs } from '../index';\n\nexport const blockForm = () => {\n  refs.buttonForm.setAttribute('disabled', 'true');\n  [...refs.inputsForm].map(input => input.setAttribute('disabled', 'true'));\n  [...refs.buttonContact].map(button => button.setAttribute('disabled', 'true'));\n};\n","import { refs } from '../index';\n\nexport const unblockForm = () => {\n  refs.buttonForm.removeAttribute('disabled');\n  [...refs.inputsForm].map(input => input.removeAttribute('disabled'));\n  [...refs.buttonContact].map(button => button.removeAttribute('disabled'));\n};\n","import { refs } from '../index';\nimport { creatMarkup } from './create-markup';\nimport { blockForm } from './block-form';\nimport { unblockForm } from './unblock-form';\n\nexport const addNewContact = contact => {\n  blockForm();\n  setTimeout(() => {\n    refs.ul.insertAdjacentHTML('afterbegin', creatMarkup(contact));\n    refs.buttonContact = document.querySelectorAll('.users-list__button');\n    unblockForm();\n  }, 2000);\n};\n","import { creatContact } from './create-contact';\nimport { addNewContact } from './add-new-contact';\n\nexport const getFormData = e => {\n  e.preventDefault();\n  const name = e.target.name.value;\n  const number = e.target.number.value;\n  e.target.reset();\n  addNewContact(creatContact({ name, number }));\n};\n","module.exports=[{name:\"Jada\",number:\"447-874-5831\",id:\"1\"},{name:\"Rogers\",number:\"257-660-1844\",id:\"2\"},{name:\"June\",number:\"414-546-1655\",id:\"3\"},{name:\"Jaquan\",number:\"354-824-2952\",id:\"4\"},{name:\"Courtney\",number:\"866-451-2822\",id:\"5\"},{name:\"Ozella\",number:\"930-593-7620\",id:\"6\"}];","import './sass/main.scss';\nimport { creatMarkup } from './js/create-markup';\nimport { getFormData } from './js/get-form-data';\n\nimport users from './db.json';\n\nexport const refs = {\n  ul: document.querySelector('.users-list'),\n  form: document.querySelector('.form'),\n  buttonForm: document.querySelector('.form__button'),\n  inputsForm: document.querySelectorAll('.form__input'),\n  buttonContact: '',\n};\n\nconst arrMarkupRef = users.map(creatMarkup).join('');\nconsole.log(arrMarkupRef);\nrefs.ul.insertAdjacentHTML('afterbegin', arrMarkupRef);\n\nrefs.form.addEventListener('submit', getFormData);\n\nrefs.buttonContact = document.querySelectorAll('.users-list__button');\n"]}