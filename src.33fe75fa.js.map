{"version":3,"sources":["../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","js/create-markup.js","js/create-contact.js","js/block-form.js","js/unblock-form.js","js/add-new-contact.js","js/get-form-data.js","js/element-edit-markup.js","js/create-edited-markup.js","js/update-contact.js","js/btn-click-handler.js","db.json","index.js"],"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase","creatMarkup","name","number","creatContact","newContact","blockForm","buttonForm","setAttribute","refs","inputsForm","map","input","buttonsContact","button","unblockForm","removeAttribute","addNewContact","contact","setTimeout","ul","insertAdjacentHTML","document","querySelectorAll","getFormData","e","preventDefault","console","target","value","reset","creatingElementEditMarkup","createEditedMarkup","updateContact","elem","innerHTML","btnClickHandler","dataId","dataset","getElementById","remove","editableElement","firstElementChild","textContent","lastElementChild","formEditRef","querySelector","addEventListener","module","exports","form","arrMarkupRef","users","join"],"mappings":";;;AAAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAAA,IAAIA,EACF,mEADF,QAAA,YAAA;;AC4CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,OAAA,QAAA,aAAA,QAAA,oBAAA,EAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eA5CA,IAAA,EAAA,QAAA,2BA2BA,IAAIC,EAASC,GAASC,OAAOC,gBAAgB,IAAIC,WAAWH,IAiB5D,QAAA,OAAA,EAhBA,IAAII,EAAe,CAACC,EAAUC,EAAMC,KAC9BC,IAAAA,GAAQ,GAAMC,KAAKC,IAAIL,EAASM,OAAS,GAAKF,KAAKG,KAAQ,EAC3DC,KAAW,IAAML,EAAOF,EAAQD,EAASM,QACtC,MAAA,KACDG,IAAAA,EAAK,GACF,OAAM,CACPd,IAAAA,EAAQO,EAAUM,GAClBE,EAAIF,EACDE,KAAAA,KAEDD,IADJA,GAAMT,EAASL,EAAMe,GAAKP,IAAS,IAC5BG,SAAWL,EAAM,OAAOQ,KAMvC,QAAA,aAAA,EADA,IAAIE,EAAiB,CAACX,EAAUC,IAASF,EAAaC,EAAUC,EAAMP,GACtE,QAAA,eAAA,EAAA,IAAIkB,EAAS,WAACX,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACfQ,EAAK,GACLd,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWG,IAC3CA,KAAAA,KAAQ,CACTY,IAAAA,EAAqB,GAAdlB,EAAMM,GAEfQ,GADEI,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGHJ,OAAAA,GAfT,QAAA,OAAA;;AC1CO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAFP,IAAA,EAAA,QAAA,UAEO,MAAMO,EAAc,IAAC,IAAA,KAAEC,EAAF,OAAQC,EAAR,GAAgBT,GAAS,EAC3C,oBACCA,mGAEwBQ,2DACaC,+CACNA,kFAGtBT,yGACAA,2GAVb,QAAA,YAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAFP,IAAA,EAAA,QAAA,UAEO,MAAMU,EAAe,IAAC,IAAA,KAAEF,EAAF,OAAQC,GAAa,EAOzCE,MANY,CACjBX,IAAI,EADa,EAAA,UAEjBQ,KAAAA,EACAC,OAAAA,IAJG,QAAA,aAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAFP,IAAA,EAAA,QAAA,YAEO,MAAMG,EAAY,KAClBC,EAAAA,KAAAA,WAAWC,aAAa,WAAY,QACxC,IAAGC,EAAKC,KAAAA,YAAYC,IAAIC,GAASA,EAAMJ,aAAa,WAAY,SAChE,IAAGC,EAAKI,KAAAA,gBAAgBF,IAAIG,GAAUA,EAAON,aAAa,WAAY,UAHlE,QAAA,UAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAFP,IAAA,EAAA,QAAA,YAEO,MAAMO,EAAc,KACpBR,EAAAA,KAAAA,WAAWS,gBAAgB,YAC/B,IAAGP,EAAKC,KAAAA,YAAYC,IAAIC,GAASA,EAAMI,gBAAgB,aACvD,IAAGP,EAAKI,KAAAA,gBAAgBF,IAAIG,GAAUA,EAAOE,gBAAgB,cAHzD,QAAA,YAAA;;ACGA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EALP,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,mBACA,EAAA,QAAA,gBACA,EAAA,QAAA,kBAEO,MAAMC,EAAgBC,KAC3B,EAAA,EAAA,aACAC,WAAW,KACJC,EAAAA,KAAAA,GAAGC,mBAAmB,cAAc,EAAYH,EAAAA,aAAAA,IAChDL,EAAAA,KAAAA,eAAiBS,SAASC,iBAAiB,wBAChD,EAAA,EAAA,gBACC,MANE,QAAA,cAAA;;ACFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAHP,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,qBAEO,MAAMC,EAAcC,IACzBA,EAAEC,iBACFC,QAAQrC,IAAImC,GACNvB,MAAAA,EAAOuB,EAAEG,OAAO1B,KAAK2B,MACrB1B,EAASsB,EAAEG,OAAOzB,OAAO0B,MAC/BJ,EAAEG,OAAOE,SACK,EAAA,EAAA,gBAAA,EAAa,EAAA,cAAA,CAAE5B,KAAAA,EAAMC,OAAAA,MAN9B,QAAA,YAAA;;ACHA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,+BAAA,EAAA,MAAM4B,EAA4B,IAAC,IAAA,KAAE7B,EAAF,OAAQC,GAAa,EACrD,oPAOYD,6aAUAC,4kBAlBf,QAAA,0BAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,EAAA,MAAM6B,EAAqB,IAAC,IAAA,KAAE9B,EAAF,OAAQC,EAAR,GAAgBT,GAAS,EAClD,+EAEyBQ,2DACaC,+CACNA,kFAGtBT,mGARb,QAAA,mBAAA;;ACIA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAJP,IAAA,EAAA,QAAA,MACA,EAAA,QAAA,kBACA,EAAA,QAAA,0BAEO,MAAMuC,EAAgB,CAACR,EAAG/B,EAAIwC,KAC7BhC,MAAAA,EAAOuB,EAAEG,OAAO1B,KAAK2B,MACrB1B,EAASsB,EAAEG,OAAOzB,OAAO0B,MAE/BV,WAAW,KACTe,EAAKC,WAAY,EAAmB,EAAA,oBAAA,CAAEjC,KAAAA,EAAMC,OAAAA,EAAQT,GAAAA,IAC/CmB,EAAAA,KAAAA,eAAiBS,SAASC,iBAAiB,wBAChD,EAAA,EAAA,gBACC,MARE,QAAA,cAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EALP,IAAA,EAAA,QAAA,MACA,EAAA,QAAA,gBACA,EAAA,QAAA,yBACA,EAAA,QAAA,oBAEO,MAAMa,EAAkBX,IACvBvB,MAAAA,EAAOuB,EAAEG,OAAO1B,KAChBmC,EAASZ,EAAEG,OAAOU,QAAQ5C,GAE5BQ,GAAS,WAATA,EAAmB,CACEoB,SAASiB,kBAAkBF,KACnCG,SAGbtC,GAAS,SAATA,EAAiB,CACbuC,MAAAA,EAAkBnB,SAASiB,kBAAkBF,KAC7CnC,EAAOuC,EAAgBC,kBAAkBA,kBAAkBC,YAC3DxC,EAASsC,EAAgBC,kBAAkBE,iBAAiBD,YAElEF,EAAgBN,WAAY,EAA0B,EAAA,2BAAA,CAAEjC,KAAAA,EAAMC,OAAAA,IACxD0C,MAAAA,EAAcvB,SAASwB,cAAc,cACvBxB,SAASwB,cAAc,UAE/BC,iBAAiB,QAAS,KACpCF,EAAYH,kBAAkBA,kBAAkBb,MAAQ,GACxDgB,EAAYH,kBAAkBE,iBAAiBf,MAAQ,MAGzD,EAAA,EAAA,aAEAgB,EAAYE,iBAAiB,SAAUtB,IACrCA,EAAEC,iBACGb,EAAAA,KAAAA,eAAiBS,SAASC,iBAAiB,wBAChD,EAAA,EAAA,cACcE,EAAAA,EAAAA,eAAAA,EAAGY,EAAQI,OA7BxB,QAAA,gBAAA;;ACLPO,OAAOC,QAAQ,CAAC,CAAC/C,KAAK,OAAOC,OAAO,eAAeT,GAAG,KAAK,CAACQ,KAAK,SAASC,OAAO,eAAeT,GAAG,KAAK,CAACQ,KAAK,OAAOC,OAAO,eAAeT,GAAG,KAAK,CAACQ,KAAK,SAASC,OAAO,eAAeT,GAAG,KAAK,CAACQ,KAAK,WAAWC,OAAO,eAAeT,GAAG;;ACqB1O,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EArBA,QAAA,oBACA,IAAA,EAAA,QAAA,sBACA,EAAA,QAAA,sBACA,EAAA,QAAA,0BAEA,EAAA,EAAA,QAAA,cAgBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAdO,MAAMe,EAAO,CAClBW,GAAIE,SAASwB,cAAc,eAC3BI,KAAM5B,SAASwB,cAAc,SAC7BvC,WAAYe,SAASwB,cAAc,iBACnCpC,WAAYY,SAASC,iBAAiB,gBACtCV,eAAgB,IASlB,QAAA,KAAA,EANA,MAAMsC,EAAeC,EAAMzC,QAAAA,IAAIV,EAAV,aAAuBoD,KAAK,IACjD5C,EAAKW,GAAGC,mBAAmB,aAAc8B,GAEzC1C,EAAKyC,KAAKH,iBAAiB,SAAUvB,EAArC,aACAf,EAAKW,GAAG2B,iBAAiB,QAASX,EAAlC,iBAEA3B,EAAKI,eAAiBS,SAASC,iBAAiB","file":"src.33fe75fa.js","sourceRoot":"..\\src","sourcesContent":["let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid';\r\n\r\nexport const creatMarkup = ({ name, number, id }) => {\r\n  return `\r\n  <li id=${id} class=\"users-list__item\">\r\n  <div class=\"users-list__text\">\r\n  <span class=\"users-list__name\">${name}</span>\r\n  <a class=\"users-list__phone-link\" href=\"tel:${number}\"\r\n  ><span class=\"users-list__phone-text\">${number}</span></a>\r\n  </div>\r\n  <div class=\"users-list__buttons\">\r\n  <button data-id=${id} name=\"edit\" class=\"users-list__button edit\" type=\"button\">Редактировать</button>\r\n  <button data-id=${id} name=\"delete\" class=\"users-list__button delete\" type=\"button\">Удалить</button>\r\n  </div>\r\n  </li>\r\n  `;\r\n};\r\n","import { nanoid } from 'nanoid';\r\n\r\nexport const creatContact = ({ name, number }) => {\r\n  const newContact = {\r\n    id: nanoid(),\r\n    name,\r\n    number,\r\n  };\r\n\r\n  return newContact;\r\n};\r\n","import { refs } from '../index';\r\n\r\nexport const blockForm = () => {\r\n  refs.buttonForm.setAttribute('disabled', 'true');\r\n  [...refs.inputsForm].map(input => input.setAttribute('disabled', 'true'));\r\n  [...refs.buttonsContact].map(button => button.setAttribute('disabled', 'true'));\r\n};\r\n","import { refs } from '../index';\r\n\r\nexport const unblockForm = () => {\r\n  refs.buttonForm.removeAttribute('disabled');\r\n  [...refs.inputsForm].map(input => input.removeAttribute('disabled'));\r\n  [...refs.buttonsContact].map(button => button.removeAttribute('disabled'));\r\n};\r\n","import { refs } from '../index';\r\nimport { creatMarkup } from './create-markup';\r\nimport { blockForm } from './block-form';\r\nimport { unblockForm } from './unblock-form';\r\n\r\nexport const addNewContact = contact => {\r\n  blockForm();\r\n  setTimeout(() => {\r\n    refs.ul.insertAdjacentHTML('afterbegin', creatMarkup(contact));\r\n    refs.buttonsContact = document.querySelectorAll('.users-list__button');\r\n    unblockForm();\r\n  }, 2000);\r\n};\r\n","import { creatContact } from './create-contact';\r\nimport { addNewContact } from './add-new-contact';\r\n\r\nexport const getFormData = e => {\r\n  e.preventDefault();\r\n  console.log(e);\r\n  const name = e.target.name.value;\r\n  const number = e.target.number.value;\r\n  e.target.reset();\r\n  addNewContact(creatContact({ name, number }));\r\n};\r\n","export const creatingElementEditMarkup = ({ name, number }) => {\r\n  return `\r\n    <form class=\"form-edit\" autocomplete=\"off\">\r\n          <div class=\"form-edit__input-wrapper\">\r\n            <input\r\n              class=\"form-edit__input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value=${name}\r\n              pattern=\"\\^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\\\"\r\n              title=\"Имя может содержать только буквы, апостроф, тире и пробелы. Например Адриан, Якоб Мерсер, Шарль де Батц де Кастельмор д'Артаньян.\"\r\n              required\r\n            />\r\n          \r\n           <input\r\n              class=\"form-edit__input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value=${number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, дефисы, круглые скобки и может начинаться с +.\"\r\n              required\r\n            />\r\n        </div>\r\n         \r\n            <div class=\"users-list__buttons\">\r\n            <button name=\"save\" class=\"users-list__button save\"  type=\"submit\" \">Сохранить</button>\r\n            <button name=\"clear\" class=\"users-list__button clear\" type=\"button\">Очистить</button>\r\n            </div>\r\n            </form>\r\n  `;\r\n};\r\n","export const createEditedMarkup = ({ name, number, id }) => {\r\n  return `\r\n   <div class=\"users-list__text\">\r\n  <span class=\"users-list__name\">${name}</span>\r\n  <a class=\"users-list__phone-link\" href=\"tel:${number}\"\r\n  ><span class=\"users-list__phone-text\">${number}</span></a>\r\n  </div>\r\n  <div class=\"users-list__buttons\">\r\n  <button data-id=${id} name=\"delete\" class=\"users-list__button delete\" type=\"button\">Удалить</button>\r\n  </div>\r\n   `;\r\n};\r\n","import { refs } from '..';\r\nimport { unblockForm } from './unblock-form';\r\nimport { createEditedMarkup } from './create-edited-markup';\r\n\r\nexport const updateContact = (e, id, elem) => {\r\n  const name = e.target.name.value;\r\n  const number = e.target.number.value;\r\n\r\n  setTimeout(() => {\r\n    elem.innerHTML = createEditedMarkup({ name, number, id });\r\n    refs.buttonsContact = document.querySelectorAll('.users-list__button');\r\n    unblockForm();\r\n  }, 2000);\r\n};\r\n","import { refs } from '..';\r\nimport { blockForm } from './block-form';\r\nimport { creatingElementEditMarkup } from './element-edit-markup';\r\nimport { updateContact } from './update-contact';\r\n\r\nexport const btnClickHandler = e => {\r\n  const name = e.target.name;\r\n  const dataId = e.target.dataset.id;\r\n\r\n  if (name === 'delete') {\r\n    const deletedContact = document.getElementById(`${dataId}`);\r\n    deletedContact.remove();\r\n  }\r\n\r\n  if (name === 'edit') {\r\n    const editableElement = document.getElementById(`${dataId}`);\r\n    const name = editableElement.firstElementChild.firstElementChild.textContent;\r\n    const number = editableElement.firstElementChild.lastElementChild.textContent;\r\n\r\n    editableElement.innerHTML = creatingElementEditMarkup({ name, number });\r\n    const formEditRef = document.querySelector('.form-edit');\r\n    const btnClearRef = document.querySelector('.clear');\r\n\r\n    btnClearRef.addEventListener('click', () => {\r\n      formEditRef.firstElementChild.firstElementChild.value = '';\r\n      formEditRef.firstElementChild.lastElementChild.value = '';\r\n    });\r\n\r\n    blockForm();\r\n\r\n    formEditRef.addEventListener('submit', e => {\r\n      e.preventDefault();\r\n      refs.buttonsContact = document.querySelectorAll('.users-list__button');\r\n      blockForm();\r\n      updateContact(e, dataId, editableElement);\r\n    });\r\n  }\r\n};\r\n","module.exports=[{name:\"Jada\",number:\"447-874-5831\",id:\"1\"},{name:\"Rogers\",number:\"257-660-1844\",id:\"2\"},{name:\"June\",number:\"414-546-1655\",id:\"3\"},{name:\"Jaquan\",number:\"354-824-2952\",id:\"4\"},{name:\"Courtney\",number:\"866-451-2822\",id:\"5\"}];","import './sass/main.scss';\nimport { creatMarkup } from './js/create-markup';\nimport { getFormData } from './js/get-form-data';\nimport { btnClickHandler } from './js/btn-click-handler';\n\nimport users from './db.json';\n\nexport const refs = {\n  ul: document.querySelector('.users-list'),\n  form: document.querySelector('.form'),\n  buttonForm: document.querySelector('.form__button'),\n  inputsForm: document.querySelectorAll('.form__input'),\n  buttonsContact: '',\n};\n\nconst arrMarkupRef = users.map(creatMarkup).join('');\nrefs.ul.insertAdjacentHTML('afterbegin', arrMarkupRef);\n\nrefs.form.addEventListener('submit', getFormData);\nrefs.ul.addEventListener('click', btnClickHandler);\n\nrefs.buttonsContact = document.querySelectorAll('.users-list__button');\n"]}